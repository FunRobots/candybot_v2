// Generated by gencpp from file coffebot/HeadState.msg
// DO NOT EDIT!


#ifndef COFFEBOT_MESSAGE_HEADSTATE_H
#define COFFEBOT_MESSAGE_HEADSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <coffebot/HeadMotion.h>

namespace coffebot
{
template <class ContainerAllocator>
struct HeadState_
{
  typedef HeadState_<ContainerAllocator> Type;

  HeadState_()
    : state()  {
    }
  HeadState_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::coffebot::HeadMotion_<ContainerAllocator>  _state_type;
  _state_type state;




  typedef boost::shared_ptr< ::coffebot::HeadState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coffebot::HeadState_<ContainerAllocator> const> ConstPtr;

}; // struct HeadState_

typedef ::coffebot::HeadState_<std::allocator<void> > HeadState;

typedef boost::shared_ptr< ::coffebot::HeadState > HeadStatePtr;
typedef boost::shared_ptr< ::coffebot::HeadState const> HeadStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coffebot::HeadState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coffebot::HeadState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coffebot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'coffebot': ['/home/alex/catkin_ws/src/coffebot/msg', '/home/alex/catkin_ws/devel/share/coffebot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::HeadState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::HeadState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::HeadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::HeadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::HeadState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::HeadState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coffebot::HeadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6d209a024aaa61ffa06c3cc12da026d";
  }

  static const char* value(const ::coffebot::HeadState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6d209a024aaa61fULL;
  static const uint64_t static_value2 = 0xfa06c3cc12da026dULL;
};

template<class ContainerAllocator>
struct DataType< ::coffebot::HeadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coffebot/HeadState";
  }

  static const char* value(const ::coffebot::HeadState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coffebot::HeadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "HeadMotion state\n\
\n\
================================================================================\n\
MSG: coffebot/HeadMotion\n\
float32 h_angle # 0.0 <= h_angle <= 360.0\n\
float32 v_angle # 0.0 <= v_angle <= 360.0\n\
string emotion\n\
";
  }

  static const char* value(const ::coffebot::HeadState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coffebot::HeadState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct HeadState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coffebot::HeadState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coffebot::HeadState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::coffebot::HeadMotion_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COFFEBOT_MESSAGE_HEADSTATE_H
