// Generated by gencpp from file coffebot/APIAIBotAnswer.msg
// DO NOT EDIT!


#ifndef COFFEBOT_MESSAGE_APIAIBOTANSWER_H
#define COFFEBOT_MESSAGE_APIAIBOTANSWER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coffebot
{
template <class ContainerAllocator>
struct APIAIBotAnswer_
{
  typedef APIAIBotAnswer_<ContainerAllocator> Type;

  APIAIBotAnswer_()
    : text()
    , action_name()
    , action_parameters_in_json()  {
    }
  APIAIBotAnswer_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , action_name(_alloc)
    , action_parameters_in_json(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_type;
  _text_type text;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_name_type;
  _action_name_type action_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_parameters_in_json_type;
  _action_parameters_in_json_type action_parameters_in_json;




  typedef boost::shared_ptr< ::coffebot::APIAIBotAnswer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coffebot::APIAIBotAnswer_<ContainerAllocator> const> ConstPtr;

}; // struct APIAIBotAnswer_

typedef ::coffebot::APIAIBotAnswer_<std::allocator<void> > APIAIBotAnswer;

typedef boost::shared_ptr< ::coffebot::APIAIBotAnswer > APIAIBotAnswerPtr;
typedef boost::shared_ptr< ::coffebot::APIAIBotAnswer const> APIAIBotAnswerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coffebot::APIAIBotAnswer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coffebot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'coffebot': ['/home/alex/catkin_ws/src/coffebot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::APIAIBotAnswer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::APIAIBotAnswer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::APIAIBotAnswer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9356e8a4f86a7632a7fb741a0ba9d22";
  }

  static const char* value(const ::coffebot::APIAIBotAnswer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9356e8a4f86a763ULL;
  static const uint64_t static_value2 = 0x2a7fb741a0ba9d22ULL;
};

template<class ContainerAllocator>
struct DataType< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coffebot/APIAIBotAnswer";
  }

  static const char* value(const ::coffebot::APIAIBotAnswer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string text\n\
string action_name\n\
string action_parameters_in_json\n\
";
  }

  static const char* value(const ::coffebot::APIAIBotAnswer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.action_name);
      stream.next(m.action_parameters_in_json);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct APIAIBotAnswer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coffebot::APIAIBotAnswer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coffebot::APIAIBotAnswer_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text);
    s << indent << "action_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_name);
    s << indent << "action_parameters_in_json: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_parameters_in_json);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COFFEBOT_MESSAGE_APIAIBOTANSWER_H
