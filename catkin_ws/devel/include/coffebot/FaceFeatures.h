// Generated by gencpp from file coffebot/FaceFeatures.msg
// DO NOT EDIT!


#ifndef COFFEBOT_MESSAGE_FACEFEATURES_H
#define COFFEBOT_MESSAGE_FACEFEATURES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coffebot
{
template <class ContainerAllocator>
struct FaceFeatures_
{
  typedef FaceFeatures_<ContainerAllocator> Type;

  FaceFeatures_()
    : json_emotions()
    , json_celebrities_similarity()
    , json_gender()
    , json_age()  {
    }
  FaceFeatures_(const ContainerAllocator& _alloc)
    : json_emotions(_alloc)
    , json_celebrities_similarity(_alloc)
    , json_gender(_alloc)
    , json_age(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_emotions_type;
  _json_emotions_type json_emotions;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_celebrities_similarity_type;
  _json_celebrities_similarity_type json_celebrities_similarity;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_gender_type;
  _json_gender_type json_gender;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _json_age_type;
  _json_age_type json_age;




  typedef boost::shared_ptr< ::coffebot::FaceFeatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coffebot::FaceFeatures_<ContainerAllocator> const> ConstPtr;

}; // struct FaceFeatures_

typedef ::coffebot::FaceFeatures_<std::allocator<void> > FaceFeatures;

typedef boost::shared_ptr< ::coffebot::FaceFeatures > FaceFeaturesPtr;
typedef boost::shared_ptr< ::coffebot::FaceFeatures const> FaceFeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coffebot::FaceFeatures_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coffebot::FaceFeatures_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coffebot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'coffebot': ['/home/alex/catkin_ws/src/coffebot/msg', '/home/alex/catkin_ws/devel/share/coffebot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15bb16ee860ec0e7cb55bbcb7c8e05d8";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15bb16ee860ec0e7ULL;
  static const uint64_t static_value2 = 0xcb55bbcb7c8e05d8ULL;
};

template<class ContainerAllocator>
struct DataType< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coffebot/FaceFeatures";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string json_emotions\n\
string json_celebrities_similarity\n\
string json_gender\n\
string json_age\n\
";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coffebot::FaceFeatures_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.json_emotions);
      stream.next(m.json_celebrities_similarity);
      stream.next(m.json_gender);
      stream.next(m.json_age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FaceFeatures_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coffebot::FaceFeatures_<ContainerAllocator>& v)
  {
    s << indent << "json_emotions: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_emotions);
    s << indent << "json_celebrities_similarity: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_celebrities_similarity);
    s << indent << "json_gender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_gender);
    s << indent << "json_age: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.json_age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COFFEBOT_MESSAGE_FACEFEATURES_H
