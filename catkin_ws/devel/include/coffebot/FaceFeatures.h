// Generated by gencpp from file coffebot/FaceFeatures.msg
// DO NOT EDIT!


#ifndef COFFEBOT_MESSAGE_FACEFEATURES_H
#define COFFEBOT_MESSAGE_FACEFEATURES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coffebot
{
template <class ContainerAllocator>
struct FaceFeatures_
{
  typedef FaceFeatures_<ContainerAllocator> Type;

  FaceFeatures_()
    : emotion()
    , celebrity_name()
    , gender()
    , min_age(0)
    , max_age(0)  {
    }
  FaceFeatures_(const ContainerAllocator& _alloc)
    : emotion(_alloc)
    , celebrity_name(_alloc)
    , gender(_alloc)
    , min_age(0)
    , max_age(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _emotion_type;
  _emotion_type emotion;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _celebrity_name_type;
  _celebrity_name_type celebrity_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gender_type;
  _gender_type gender;

   typedef int8_t _min_age_type;
  _min_age_type min_age;

   typedef int8_t _max_age_type;
  _max_age_type max_age;




  typedef boost::shared_ptr< ::coffebot::FaceFeatures_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coffebot::FaceFeatures_<ContainerAllocator> const> ConstPtr;

}; // struct FaceFeatures_

typedef ::coffebot::FaceFeatures_<std::allocator<void> > FaceFeatures;

typedef boost::shared_ptr< ::coffebot::FaceFeatures > FaceFeaturesPtr;
typedef boost::shared_ptr< ::coffebot::FaceFeatures const> FaceFeaturesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coffebot::FaceFeatures_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coffebot::FaceFeatures_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coffebot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'coffebot': ['/home/alex/catkin_ws/src/coffebot/msg', '/home/alex/catkin_ws/devel/share/coffebot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::FaceFeatures_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coffebot::FaceFeatures_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85fb5ab2d65e9fa3f5c71ae7f577d551";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85fb5ab2d65e9fa3ULL;
  static const uint64_t static_value2 = 0xf5c71ae7f577d551ULL;
};

template<class ContainerAllocator>
struct DataType< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coffebot/FaceFeatures";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string emotion\n\
string celebrity_name\n\
string gender\n\
int8 min_age\n\
int8 max_age\n\
";
  }

  static const char* value(const ::coffebot::FaceFeatures_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coffebot::FaceFeatures_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.emotion);
      stream.next(m.celebrity_name);
      stream.next(m.gender);
      stream.next(m.min_age);
      stream.next(m.max_age);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FaceFeatures_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coffebot::FaceFeatures_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coffebot::FaceFeatures_<ContainerAllocator>& v)
  {
    s << indent << "emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.emotion);
    s << indent << "celebrity_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.celebrity_name);
    s << indent << "gender: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gender);
    s << indent << "min_age: ";
    Printer<int8_t>::stream(s, indent + "  ", v.min_age);
    s << indent << "max_age: ";
    Printer<int8_t>::stream(s, indent + "  ", v.max_age);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COFFEBOT_MESSAGE_FACEFEATURES_H
